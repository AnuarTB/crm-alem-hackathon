{"version":3,"sources":["components/PassengerForm.js","utils/data.js","components/DataCard.js","pages/Panel.js","pages/App.js","serviceWorker.js","index.js"],"names":["schema","yup","lastName","required","firstName","middleName","dateOfBirth","nationality","identification","occupation","lastVisitedCountries","stayingPlace","contactNumbers","flightRoute","terms","handleSubmit","obj","alert","window","location","reload","regions","name","id","PassengerForm","props","Container","fluid","validationSchema","onSubmit","validator","initialValues","Date","toISOString","substr","handleChange","values","handleBlur","touched","isValid","errors","Form","Group","controlId","Label","Control","type","value","onChange","Text","className","as","map","region","key","Check","Button","variant","SURVEYS","checked","hospitalized","hospitalAddress","DataCard","survey","cardStyle","textColor","Card","bg","text","Header","Body","style","Panel","state","regionChange","bind","event","this","setState","target","surveys","Row","Col","sm","textAlign","filter","reduce","total","one","hospitalizedByRegion","React","Component","App","exact","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.763df561.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\n\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nconst schema = yup.object({\n  lastName: yup.string().required(),\n  firstName: yup.string().required(),\n  middleName: yup.string(),\n  dateOfBirth: yup.date().required(),\n  nationality: yup.string().required(),\n  identification: yup.string().required(),\n  occupation: yup.string().required(),\n  lastVisitedCountries: yup.string().required(),\n  stayingPlace: yup.string().required(),\n  contactNumbers: yup.string().required(),\n  flightRoute: yup.string().required(),\n  terms: yup.bool().required()\n});\n\nfunction handleSubmit(obj) {\n  alert(\"Спасибо за заполнение анкеты!\");\n  window.location.reload(false); \n}\n\nlet regions = [\n  { name: 'Актюбинская Область', id: 'aktobe' },\n  { name: 'Акмолинская Область', id: 'akmola' },\n  { name: 'Алматинская Область', id: 'almaty' }\n];\n\nfunction PassengerForm(props) {\n  return (\n    <Container fluid={true}>\n      <Formik\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n        validator={() => ({})}\n        initialValues={{\n          lastName: '',\n          firstName: '',\n          middleName: '',\n          dateOfBirth: new Date().toISOString().substr(0, 10),\n          nationality: '',\n          identification: '',\n          occupation: '',\n          lastVisitedCountries: '',\n          stayingPlace: '',\n          contactNumbers: '',\n          flightRoute: '',\n          terms: false\n        }}\n      >\n        {({\n          handleSubmit,\n          handleChange,\n          handleBlur,\n          values,\n          touched,\n          isValid,\n          errors\n        }) => (\n          <Form onSubmit={handleSubmit}>\n            <Form.Group controlId='formFamilyName'>\n              <Form.Label>Фамилия</Form.Label>\n              <Form.Control\n                name='lastName'\n                required\n                type='text'\n                value={values.lastName}\n                onChange={handleChange}\n              />\n            </Form.Group>\n            <Form.Group controlId='formFirstName'>\n              <Form.Label>Имя</Form.Label>\n              <Form.Control\n                name='firstName'\n                required\n                type='text'\n                value={values.firstName}\n                onChange={handleChange}\n              />\n            </Form.Group>\n            <Form.Group controlId='formMiddleName'>\n              <Form.Label>Отчество</Form.Label>\n              <Form.Control\n                name='middleName'\n                type='text'\n                value={values.middleName}\n                onChange={handleChange}\n              />\n            </Form.Group>\n            <Form.Group controlId='formDateOfBirth'>\n              <Form.Label>Дата рождения</Form.Label>\n              <Form.Control\n                name='dateOfBirth'\n                required\n                type='date'\n                value={values.dateOfBirth}\n                onChange={handleChange}\n              />\n            </Form.Group>\n            <Form.Group controlId='formNationality'>\n              <Form.Label>Гражданство</Form.Label>\n              <Form.Control\n                name='nationality'\n                required\n                type='text'\n                value={values.nationality}\n                onChange={handleChange}\n              />\n            </Form.Group>\n            <Form.Group controlId='formIdentificationData'>\n              <Form.Label>ИИН* или паспортные данные</Form.Label>\n              <Form.Control\n                name='identification'\n                required\n                type='text'\n                value={values.identification}\n                onChange={handleChange}\n              />\n              <Form.Text className='text-muted'>\n                *Индивидуальный Идентификационный Номер (Применимо только к\n                гражданам Республики Казахстан)\n              </Form.Text>\n            </Form.Group>\n            <Form.Group controlId='formOccupation'>\n              <Form.Label>Место работы (учебы)</Form.Label>\n              <Form.Control\n                name='occupation'\n                required\n                type='text'\n                value={values.occupation}\n                onChange={handleChange}\n              />\n            </Form.Group>\n            <Form.Group controlId='formLastVisitedCountries'>\n              <Form.Label>\n                В каких странах вы были в последние 14 дней\n              </Form.Label>\n              <Form.Control\n                name='lastVisitedCountries'\n                required\n                type='text'\n                value={values.lastVisitedCountries}\n                onChange={handleChange}\n              />\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>\n                Область в которую вы собираетесь поехать\n              </Form.Label>\n              <Form.Control\n                as='select'\n              >\n                {regions.map(region => (\n                  <option value={region.id} key={region.id}>\n                    {region.name}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group controlId='formStayingPlace'>\n              <Form.Label>\n                Место жительства, либо предпологаемое место проживания\n              </Form.Label>\n              <Form.Control\n                name='stayingPlace'\n                required\n                type='text'\n                value={values.stayingPlace}\n                onChange={handleChange}\n              />\n            </Form.Group>\n            <Form.Group controlId='formContactNumbers'>\n              <Form.Label>Контактный телефон</Form.Label>\n              <Form.Control\n                name='contactNumbers'\n                required\n                type='text'\n                value={values.contactNumbers}\n                onChange={handleChange}\n              />\n            </Form.Group>\n            <Form.Group controlId='formRoute'>\n              <Form.Label>Маршрут движения</Form.Label>\n              <Form.Control\n                name='flightRoute'\n                required\n                type='text'\n                value={values.flightRoute}\n                onChange={handleChange}\n              />\n            </Form.Group>\n            <Form.Group controlId='formBasicCheckbox'>\n              <Form.Label>\n                Сдавая эту форму я подтверждаю что я даю согласие на\n                использование своих данных для предотвращения распространения\n                COVID-19 на территории Республики Казахстан.\n              </Form.Label>\n              <Form.Check\n                name='terms'\n                required\n                type='checkbox'\n                onChange={handleChange}\n              />\n            </Form.Group>\n            <Button variant='primary' type='submit'>\n              Сдать анкету\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Container>\n  );\n}\n\nexport default PassengerForm;\n","export const SURVEYS = [\n  {\n    lastName: 'Иванов',\n    firstName: 'Иван',\n    dateOfBirth: new Date('1989-01-13'),\n    nationality: 'Казахстан',\n    identification: '890113123456',\n    occupation: 'Студент',\n    lastVisitedCountries: 'Россия',\n    stayingPlace: 'ул. Ленина 102',\n    contactNumbers: '123456789',\n    flightRoute: 'Москва - Алматы',\n    region: 'almaty',\n    checked: false,\n    hospitalized: false,\n    hospitalAddress: ''\n  },\n  {\n    lastName: 'Иванов',\n    firstName: 'Иван',\n    dateOfBirth: new Date('1989-01-13'),\n    nationality: 'Казахстан',\n    identification: '890113123456',\n    occupation: 'Студент',\n    lastVisitedCountries: 'Россия',\n    stayingPlace: 'ул. Ленина 102',\n    contactNumbers: '123456789',\n    flightRoute: 'Москва - Алматы',\n    region: 'aktobe',\n    checked: false,\n    hospitalized: false,\n    hospitalAddress: ''\n  },{\n    lastName: 'Иванов',\n    firstName: 'Иван',\n    dateOfBirth: new Date('1989-01-13'),\n    nationality: 'Казахстан',\n    identification: '890113123456',\n    occupation: 'Студент',\n    lastVisitedCountries: 'Россия',\n    stayingPlace: 'ул. Ленина 102',\n    contactNumbers: '123456789',\n    flightRoute: 'Москва - Алматы',\n    region: 'akmola',\n    checked: false,\n    hospitalized: false,\n    hospitalAddress: ''\n  },\n  {\n    lastName: 'Иванов',\n    firstName: 'Иван',\n    dateOfBirth: new Date('1989-01-13'),\n    nationality: 'Казахстан',\n    identification: '890113123456',\n    occupation: 'Бизнесмен',\n    lastVisitedCountries: 'Франция',\n    stayingPlace: 'ул. Ленина 102',\n    contactNumbers: '123456789',\n    flightRoute: 'Париж - Алматы',\n    region: 'akmola',\n    checked: false,\n    hospitalized: false,\n    hospitalAddress: ''\n  },\n  {\n    lastName: 'Иванов',\n    firstName: 'Иван',\n    dateOfBirth: new Date('1989-01-13'),\n    nationality: 'Казахстан',\n    identification: '890113123456',\n    occupation: 'Студент',\n    lastVisitedCountries: 'Россия',\n    stayingPlace: 'ул. Ленина 102',\n    contactNumbers: '123456789',\n    flightRoute: 'Москва - Алматы',\n    region: 'almaty',\n    checked: false,\n    hospitalized: true,\n    hospitalAddress: ''\n  },\n  {\n    lastName: 'Иванов',\n    firstName: 'Иван',\n    dateOfBirth: new Date('1993-02-24'),\n    nationality: 'Россия',\n    identification: '890113123456',\n    occupation: 'Разнорабочий',\n    lastVisitedCountries: 'Италия',\n    stayingPlace: 'ул. Жуковского 5',\n    contactNumbers: '123456879',\n    flightRoute: 'Милан - Москва, Москва - Актобе',\n    region: 'aktobe',\n    checked: true,\n    hospitalized: true,\n    hospitalAddress: 'Больница №1'\n  },\n  {\n    lastName: 'Иванов',\n    firstName: 'Иван',\n    dateOfBirth: new Date('1993-02-24'),\n    nationality: 'Россия',\n    identification: '890113123456',\n    occupation: 'Разнорабочий',\n    lastVisitedCountries: 'Италия',\n    stayingPlace: 'ул. Жуковского 5',\n    contactNumbers: '123456879',\n    flightRoute: 'Милан - Москва, Москва - Актобе',\n    region: 'aktobe',\n    checked: true,\n    hospitalized: false,\n    hospitalAddress: 'Больница №1'\n  },\n  {\n    lastName: 'Иванов',\n    firstName: 'Иван',\n    dateOfBirth: new Date('1993-02-24'),\n    nationality: 'Россия',\n    identification: '890113123456',\n    occupation: 'Разнорабочий',\n    lastVisitedCountries: 'Италия',\n    stayingPlace: 'ул. Жуковского 5',\n    contactNumbers: '123456879',\n    flightRoute: 'Милан - Москва, Москва - Актобе',\n    region: 'almaty',\n    checked: true,\n    hospitalized: false,\n    hospitalAddress: 'Больница №1'\n  }\n];\n\nexport function checkedByRegion(surveys, region) {\n  return surveys\n    .filter(survey => survey.region === region)\n    .reduce((total, one) => total + (one.checked === true ? 0 : 1), 0);\n}\n\nexport function hospitalizedByRegion(surveys, region) {\n  return surveys\n    .filter(survey => survey.region === region)\n    .reduce((total, one) => total + (one.hospitalized === true ? 1 : 0), 0);\n}\n","import React from 'react';\n\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\n\nimport { MdPhone } from 'react-icons/md';\n\nfunction DataCard({survey}) {\n  const cardStyle = !survey.checked ? 'danger' : (survey.hospitalized ? 'warning' : 'light');\n  const textColor = !survey.checked ? 'white' : 'black';\n  return (\n    <Card bg={cardStyle} text={textColor} className='mt-3'>\n      <Card.Header><h3>{survey.lastName + ' ' + survey.firstName}</h3></Card.Header>\n      <Card.Body style={{'fontSize': '1.3em'}}>\n        Гражданство: {survey.nationality}\n        <br/>\n        ИИН / Номер паспорта: {survey.identification}\n        <br/>\n        Последние посещенные страны: {survey.lastVisitedCountries}\n        <br/>\n        Место проживания: {survey.stayingPlace}\n        {survey.hospitalized && (\n          <>\n            <br/>\n            Больница: {survey.hospitalAddress}\n          </>\n        )}\n        <br/>\n        Контактный номер: {survey.contactNumbers}\n        <br />\n        <Button variant='dark' className='mt-2'>\n          <MdPhone /> Позвонить\n        </Button>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default DataCard;","import React from 'react';\n\nimport './Panel.css';\n\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\n\nimport { MdWarning, MdLocalHospital } from 'react-icons/md';\n\nimport { SURVEYS, checkedByRegion, hospitalizedByRegion } from '../utils/data';\nimport DataCard from '../components/DataCard';\n\nlet regions = [\n  { name: 'Актюбинская Область', id: 'aktobe' },\n  { name: 'Акмолинская Область', id: 'akmola' },\n  { name: 'Алматинская Область', id: 'almaty' }\n];\n\nclass Panel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { region: 'aktobe' };\n\n    this.regionChange = this.regionChange.bind(this);\n  }\n\n  regionChange(event) {\n    this.setState({ region: event.target.value });\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col sm={4}>\n            <Form>\n              <Form.Group>\n                <Form.Label>\n                  <h2>Выберите Область</h2>\n                </Form.Label>\n                <Form.Control\n                  as='select'\n                  value={this.state.value}\n                  onChange={this.regionChange}\n                >\n                  {regions.map(region => (\n                    <option value={region.id} key={region.id}>\n                      {region.name}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Form.Group>\n\n              {/*<Button variant='primary' type='submit'>\n                  Submit\n                </Button>*/}\n            </Form>\n            <Card bg='danger' text='white' className='mt-5'>\n              <Card.Header>\n                <MdWarning className='enlargedIcon' />\n                Число непроверенных людей\n              </Card.Header>\n              <Card.Body>\n                <h1 style={{ textAlign: 'center' }}>\n                  {checkedByRegion(SURVEYS, this.state.region)}\n                </h1>\n              </Card.Body>\n            </Card>\n            <Card bg='warning' text='black' className='mt-5'>\n              <Card.Header>\n                <MdLocalHospital className='enlargedIcon' />\n                Число госпитализированных людей\n              </Card.Header>\n              <Card.Body>\n                <h1 style={{ textAlign: 'center' }}>\n                  {hospitalizedByRegion(SURVEYS, this.state.region)}\n                </h1>\n              </Card.Body>\n            </Card>\n          </Col>\n          <Col sm={8}>\n            {SURVEYS\n              .filter(survey => survey.region === this.state.region)\n              .map(survey => (<DataCard survey={survey} />))\n            }\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Panel;\n","import React from 'react';\nimport './App.css';\n\nimport Container from 'react-bootstrap/Container';\n\nimport PassengerForm from '../components/PassengerForm';\nimport Panel from './Panel';\n\nimport { Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Container fluid='md'>\n      <p className='h1 m-3'><strong>Redemax</strong></p>\n      <hr/>\n      <Switch>\n        <Route exact path='/'>\n          <PassengerForm />\n        </Route>\n        <Route path='/panel'>\n          <Panel />\n        </Route>\n      </Switch>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}