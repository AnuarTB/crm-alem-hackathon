{"version":3,"sources":["components/PassengerForm.js","pages/App.js","serviceWorker.js","index.js"],"names":["PassengerForm","Form","Group","controlId","Label","Control","type","Text","className","Check","App","Jumbotron","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iRAqEeA,MAjEf,WACE,OACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBACpB,kBAACF,EAAA,EAAKG,MAAN,mDACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,UAErB,kBAACL,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBACpB,kBAACF,EAAA,EAAKG,MAAN,2BACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,UAErB,kBAACL,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBACpB,kBAACF,EAAA,EAAKG,MAAN,yDACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,UAErB,kBAACL,EAAA,EAAKC,MAAN,CAAYC,UAAU,mBACpB,kBAACF,EAAA,EAAKG,MAAN,kFACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,UAErB,kBAACL,EAAA,EAAKC,MAAN,CAAYC,UAAU,mBACpB,kBAACF,EAAA,EAAKG,MAAN,2EACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,UAErB,kBAACL,EAAA,EAAKC,MAAN,CAAYC,UAAU,0BACpB,kBAACF,EAAA,EAAKG,MAAN,iJACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,SACnB,kBAACL,EAAA,EAAKM,KAAN,CAAWC,UAAU,cAArB,gfAKF,kBAACP,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBACpB,kBAACF,EAAA,EAAKG,MAAN,6GACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,UAErB,kBAACL,EAAA,EAAKC,MAAN,CAAYC,UAAU,4BACpB,kBAACF,EAAA,EAAKG,MAAN,mNACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,UAErB,kBAACL,EAAA,EAAKC,MAAN,CAAYC,UAAU,oBACpB,kBAACF,EAAA,EAAKG,MAAN,+SAGA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,UAErB,kBAACL,EAAA,EAAKC,MAAN,CAAYC,UAAU,sBACpB,kBAACF,EAAA,EAAKG,MAAN,sHACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,UAErB,kBAACL,EAAA,EAAKC,MAAN,CAAYC,UAAU,aACpB,kBAACF,EAAA,EAAKG,MAAN,oGACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,UAErB,kBAACL,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBACpB,kBAACF,EAAA,EAAKG,MAAN,kzBAKA,kBAACH,EAAA,EAAKQ,MAAN,CAAYH,KAAK,gBC/CVI,MATf,WACE,OACE,kBAACC,EAAA,EAAD,KACE,0LACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aa69bdcd.chunk.js","sourcesContent":["import React from 'react';\n\nimport Form from 'react-bootstrap/Form';\n\nfunction PassengerForm() {\n  return (\n    <Form>\n      <Form.Group controlId='formFamilyName'>\n        <Form.Label>Фамилия</Form.Label>\n        <Form.Control type='text' />\n      </Form.Group>\n      <Form.Group controlId='formFirstName'>\n        <Form.Label>Имя</Form.Label>\n        <Form.Control type='text' />\n      </Form.Group>\n      <Form.Group controlId='formMiddleName'>\n        <Form.Label>Отчество</Form.Label>\n        <Form.Control type='text' />\n      </Form.Group>\n      <Form.Group controlId='formDateOfBirth'>\n        <Form.Label>Дата рождения</Form.Label>\n        <Form.Control type='date' />\n      </Form.Group>\n      <Form.Group controlId='formNationality'>\n        <Form.Label>Гражданство</Form.Label>\n        <Form.Control type='text' />\n      </Form.Group>\n      <Form.Group controlId='formIdentificationData'>\n        <Form.Label>ИИН* или паспортные данные</Form.Label>\n        <Form.Control type='text' />\n        <Form.Text className='text-muted'>\n          *Индивидуальный Идентификационный Номер (Применимо только к гражданам\n          Республики Казахстан)\n        </Form.Text>\n      </Form.Group>\n      <Form.Group controlId='formOccupation'>\n        <Form.Label>Место работы (учебы)</Form.Label>\n        <Form.Control type='text' />\n      </Form.Group>\n      <Form.Group controlId='formLastVisitedCountries'>\n        <Form.Label>В какой стране вы были в последние 14 дней</Form.Label>\n        <Form.Control type='text' />\n      </Form.Group>\n      <Form.Group controlId='formStayingPlace'>\n        <Form.Label>\n          Место жительства, либо предпологаемое место проживания\n        </Form.Label>\n        <Form.Control type='text' />\n      </Form.Group>\n      <Form.Group controlId='formContactNumbers'>\n        <Form.Label>Контактные телефоны</Form.Label>\n        <Form.Control type='text' />\n      </Form.Group>\n      <Form.Group controlId='formRoute'>\n        <Form.Label>Маршрут движения</Form.Label>\n        <Form.Control type='text' />\n      </Form.Group>\n      <Form.Group controlId='formBasicCheckbox'>\n        <Form.Label>\n          Сдавая эту форму я подтверждаю что я даю согласие на использование\n          своих данных для предотвращения распространения COVID-19 на территории\n          Республики Казахстан.\n        </Form.Label>\n        <Form.Check type='checkbox' />\n      </Form.Group>\n    </Form>\n  );\n}\n\nexport default PassengerForm;\n","import React from 'react';\nimport './App.css';\n\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\nimport PassengerForm from '../components/PassengerForm';\n\nfunction App() {\n  return (\n    <Jumbotron>\n      <h1>Добро пожаловать в Казахстан!</h1>\n      <PassengerForm />\n    </Jumbotron>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}